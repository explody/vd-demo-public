# swagger.yml

openapi: 3.0.0
info:
  title: "RP Flask REST API"
  description: "An API about people and notes"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  parameters:
    q:
      name: "q"
      description: One or more search terms which will match on the model's searchable fields
      in: query
      required: false
      schema:
        type: "string"
    column_filter:
      name: "column_filter"
      description: A direct match for one column, to filter results
      in: query
      required: false
      schema:
        type: "string"
    expand:
      name: "expand"
      description: One or more nested items to fully populate
      in: query
      required: false
      schema:
        type: "string"
    page:
      name: "page"
      description: Which page of data to return
      in: query
      required: false
      schema:
        type: "integer"
    limit:
      name: "limit"
      description: Number of items to return
      in: query
      required: false
      schema:
        type: "integer"
    order_by:
      name: "order_by"
      description: Order by this record field
      in: query
      required: false
      schema:
        type: "string"
    sort_dir:
      name: "sort_dir"
      description: Direction to sort, asc or desc
      in: query
      required: false
      schema:
        type: "string"

paths:
  "/people":
    get:
      operationId: "people.read_people"
      tags:
        - "People"
      parameters:
        - $ref: "#/components/parameters/expand"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/order_by"
        - $ref: "#/components/parameters/sort_dir"
        - $ref: "#/components/parameters/column_filter"
        - $ref: "#/components/parameters/q"
      summary: "Read the list of people"
      responses:
        "200":
          description: "Successfully read people list"
  "/people/{pid}":
    get:
      operationId: "people.read_person"
      tags:
        - "Person"
      summary: "Read a single person"
      responses:
        "200":
          description: "Successfully read person"
  "/company":
    get:
      operationId: "companies.read_companies"
      tags:
        - "Companies"
      parameters:
        - $ref: "#/components/parameters/expand"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/order_by"
        - $ref: "#/components/parameters/sort_dir"
        - $ref: "#/components/parameters/column_filter"
        - $ref: "#/components/parameters/q"
      summary: "Read the list of companies"
      responses:
        "200":
          description: "Successfully read company list"
  "/company/{cid}":
    get:
      operationId: "companies.read_company"
      tags:
        - "Companies"
      summary: "Read a single company"
      responses:
        "200":
          description: "Successfully read company"
  # "/company/{cid}/people":
  #   get:
  #     operationId: "companies.read_company_people"
  #     tags:
  #       - "Companies"
  #     parameters:
  #       - $ref: "#/components/parameters/expand"
  #       - $ref: "#/components/parameters/page"
  #       - $ref: "#/components/parameters/limit"
  #       - $ref: "#/components/parameters/order_by"
  #       - $ref: "#/components/parameters/sort_dir"
  #       - $ref: "#/components/parameters/column_filter"
  #       - $ref: "#/components/parameters/q"
  #     summary: "Read all the people for a given company"
  #     responses:
  #       "200":
  #         description: "Successfully read company"
